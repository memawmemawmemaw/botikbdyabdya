import sqlite3
import ssl
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
import requests
from telegram import Update, CallbackQuery
from telegram.ext import Updater, CommandHandler,Filters, MessageHandler, CallbackContext, ConversationHandler, CallbackQueryHandler
import certifi

from telegram import ReplyKeyboardMarkup, KeyboardButton


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
REGISTERING_USER, REGISTERING_NICKNAME = range(2)

DEPOSIT_AMOUNT, CHOOSING_NETWORK = range(2)




def create_connection():
    """
    –°–æ–∑–¥–∞—ë—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

    :return: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    # –í —Ñ—É–Ω–∫—Ü–∏–∏ create_connection() –∏–∑–º–µ–Ω–∏—Ç–µ –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ "users_new.db"
    conn = sqlite3.connect("users.db")

    return conn





def start_registration(update: Update, context: CallbackContext) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    :return: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:")
    return REGISTERING_USER






REGISTERING_NICKNAME = 0

def register_user(update: Update, context: CallbackContext) -> int:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    :return: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = update.message.from_user
    nickname = update.message.text

    conn = create_connection()
    cursor = conn.cursor()
    while True:
        cursor.execute("SELECT * FROM users WHERE username=?", (nickname,))
        result = cursor.fetchone()
        if result:
            update.message.reply_text("–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º:")
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∏–∫–Ω–µ–π–º–∞ –µ—â–µ —Ä–∞–∑
            return REGISTERING_NICKNAME
        else:
            cursor.execute("INSERT INTO users (username) VALUES (?)", (nickname,))
            conn.commit()
            conn.close()
            on_successful_registration(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            return ConversationHandler.END
        
        
        
        
        
def cancel_registration(update: Update, context: CallbackContext) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    :return: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END




from telegram import ReplyKeyboardMarkup, KeyboardButton

def on_successful_registration(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    :return: None
    """
    reply_markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ö–æ—à–µ–ª–µ–∫"),
                KeyboardButton(text="–ö–Ω–æ–ø–∫–∞"),
                KeyboardButton(text="–û –ø—Ä–æ–µ–∫—Ç–µ"),
                
            ]
        ],
        resize_keyboard=True
    )

    update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=reply_markup)
    
    
    
    

def wallet(update: Update, context: CallbackContext):
    username = update.effective_user.username  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balances = get_user_balances_from_database(username)
    if balances:
        rub_balance = balances.get("RUB", 0)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±–ª—è—Ö
        usdt_balance = balances.get("USDT", 0)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ USDT
        money_bag_emoji = "üí∞"  # –≠–º–æ–¥–∑–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏
        message = f"{money_bag_emoji} –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\nRUB: {rub_balance} \nUSDT: {usdt_balance}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
            [InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", callback_data="transfer")],
            [InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        update.message.reply_text(message, reply_markup=reply_markup)
        
        
        
        
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
def deposit(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    return DEPOSIT_AMOUNT



def deposit_amount(update: Update, context: CallbackContext):
    amount = update.message.text
    converted_amount = convert_to_usdt(amount)
    if converted_amount is not None:
        update.message.reply_text(f"–°—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ USDT: {converted_amount}\n"
                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –Ω–∞—à –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫: [ADDRESS].\n"
                                  "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π ID.")
    else:
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return ConversationHandler.END
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
def handle_deposit_amount(update: Update, context: CallbackContext):
    try:
        text = update.message.text
        amount_rub = float(text)
        if amount_rub <= 0:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –±–æ–ª—å—à–µ –Ω—É–ª—è
            raise ValueError
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É –≤ user_data
        context.user_data['deposit_amount'] = amount_rub
        keyboard = [
            [InlineKeyboardButton("TRON (TRC20)", callback_data="tron")],
            [InlineKeyboardButton("USDT (ERC20)", callback_data="tether")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
        return CHOOSING_NETWORK  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    except (ValueError, AttributeError):
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")


def get_usdt_rate():
    # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CoinGecko API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USDT –∫ RUB
    url = "https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub"
    response = requests.get(url, verify=True)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º verify=True –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL
    if response.status_code == 200:
        data = response.json()
        print("Response data:", data)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        usdt_to_rub = data.get('tether', {}).get('rub')  # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º 'tether' –≤–º–µ—Å—Ç–æ 'usdt'
        print("USDT to RUB rate:", usdt_to_rub)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        if usdt_to_rub:
            return 1 / usdt_to_rub  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å USDT –∫ RUB (–æ–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å)
    return None



def convert_to_usdt(amount_rub):
    print("Amount rub:", amount_rub)  # –í—ã–≤–æ–¥–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    rate = get_usdt_rate()
    print("Rate:", rate)  # –í—ã–≤–æ–¥–∏–º –∫—É—Ä—Å
    if rate is not None:
        try:
            amount_rub = float(amount_rub)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
            amount_usdt = amount_rub * rate
            return amount_usdt
        except ValueError:
            print("Invalid amount_rub:", amount_rub)
            return None
    return None


def get_trx_rate():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ TRX –∫ RUB
    url = "https://api.coingecko.com/api/v3/simple/price?ids=tron&vs_currencies=rub"
    response = requests.get(url, verify=True)
    if response.status_code == 200:
        data = response.json()
        trx_to_rub = data.get('tron', {}).get('rub')
        if trx_to_rub:
            return 1 / trx_to_rub  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å TRX –∫ RUB (–æ–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å)
    return None


def convert_to_trx(amount_rub):
    print("Amount rub:", amount_rub)  # –í—ã–≤–æ–¥–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    rate = get_trx_rate()
    print("Rate:", rate)  # –í—ã–≤–æ–¥–∏–º –∫—É—Ä—Å
    if rate is not None:
        try:
            amount_rub = float(amount_rub)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
            amount_trx = amount_rub * rate
            return amount_trx
        except ValueError:
            print("Invalid amount_rub:", amount_rub)
            return None
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
def choose_network(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    network = query.data
    query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {network}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—É–º–º—É
    user_input = context.user_data.get('deposit_amount')
    
    if user_input is not None:
        if network == 'tether':
            converted_amount = convert_to_usdt(user_input)
            address = "[USDT_ADDRESS]"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è USDT
        elif network == 'tron':
            converted_amount = convert_to_trx(user_input)
            address = "[TRX_ADDRESS]"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è TRX
            
        else:
            converted_amount = None
            address = None
        
        if converted_amount is not None:
            query.message.reply_text(f"–°—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {network.upper()}: {converted_amount}\n"
                                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –Ω–∞—à –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫ –¥–ª—è {network.upper()}: {address}.\n"
                                     "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π ID.")
            return ConversationHandler.END
        else:
            query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
def cancel_deposit(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END





def get_user_balances_from_database(username):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT rub_balance, usdt_balance FROM users WHERE username = ?", (username,))
    result = cursor.fetchone()
    conn.close()
    if result:
        return {"RUB": result[0], "USDT": result[1]}
    else:
        return {"RUB": 0, "USDT": 0}







def main():
    updater = Updater("7166999778:AAGZKkTHppT5qhCTP9i9_z_tHrF1VDm7n4g", use_context=True)
    dp = updater.dispatcher
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_registration)],
        states={
            REGISTERING_USER: [MessageHandler(Filters.text & (~Filters.command), register_user)],
        },
        fallbacks=[CommandHandler("cancel", cancel_registration)],
    )

    conv_handler_deposit = ConversationHandler(
        entry_points=[
            CommandHandler("deposit", deposit),
            MessageHandler(Filters.regex('^–ü–æ–ø–æ–ª–Ω–∏—Ç—å$'), deposit),
            CallbackQueryHandler(deposit, pattern='^deposit$')
        ],
        states={
            DEPOSIT_AMOUNT: [
                MessageHandler(Filters.text & ~Filters.command, handle_deposit_amount),
                CallbackQueryHandler(deposit, pattern='^deposit$')  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
            ],
            CHOOSING_NETWORK: [CallbackQueryHandler(choose_network, pattern='^(tron|tether)$')],
        },
        fallbacks=[CommandHandler("cancel", cancel_deposit)],
    )

    dp.add_handler(conv_handler)
    dp.add_handler(conv_handler_deposit)
    dp.add_handler(MessageHandler(Filters.regex('^–ö–æ—à–µ–ª–µ–∫$'), wallet))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()